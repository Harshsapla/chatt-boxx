"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useInputAudio = exports["default"] = void 0;

var _react = require("react");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useInputAudio = function useInputAudio(stream) {
  var _useState = (0, _react.useState)(),
      _useState2 = _slicedToArray(_useState, 2),
      context = _useState2[0],
      setContext = _useState2[1];

  var _useState3 = (0, _react.useState)(),
      _useState4 = _slicedToArray(_useState3, 2),
      source = _useState4[0],
      setSource = _useState4[1];

  var stop = (0, _react.useCallback)( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(context && context.state !== "closed")) {
              _context.next = 4;
              break;
            }

            _context.next = 3;
            return context.close();

          case 3:
            setContext(undefined);

          case 4:
            if (source) {
              source.disconnect();
              setSource(undefined);
            }

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })), [context, source]);
  (0, _react.useEffect)(function () {
    if (stream) {
      var audioCtx = new AudioContext();
      setSource(audioCtx.createMediaStreamSource(stream));
      setContext(audioCtx);
    }
  }, [stream]);
  (0, _react.useEffect)(function () {
    if (!stream) {
      stop();
    }
  }, [stream, stop]);
  return {
    audioCtx: context,
    source: source
  };
};

exports.useInputAudio = useInputAudio;
var _default = useInputAudio;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9JbnB1dEF1ZGlvLnRzeCJdLCJuYW1lcyI6WyJ1c2VJbnB1dEF1ZGlvIiwic3RyZWFtIiwiY29udGV4dCIsInNldENvbnRleHQiLCJzb3VyY2UiLCJzZXRTb3VyY2UiLCJzdG9wIiwic3RhdGUiLCJjbG9zZSIsInVuZGVmaW5lZCIsImRpc2Nvbm5lY3QiLCJhdWRpb0N0eCIsIkF1ZGlvQ29udGV4dCIsImNyZWF0ZU1lZGlhU3RyZWFtU291cmNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVPLElBQU1BLGFBQWEsR0FBRyxTQUFoQkEsYUFBZ0IsQ0FBQ0MsTUFBRCxFQUFxQztBQUNoRSxrQkFBOEIsc0JBQTlCO0FBQUE7QUFBQSxNQUFPQyxPQUFQO0FBQUEsTUFBZ0JDLFVBQWhCOztBQUNBLG1CQUE0QixzQkFBNUI7QUFBQTtBQUFBLE1BQU9DLE1BQVA7QUFBQSxNQUFlQyxTQUFmOztBQUlBLE1BQU1DLElBQUksR0FBRyw4RkFBWTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsa0JBQ25CSixPQUFPLElBQUlBLE9BQU8sQ0FBQ0ssS0FBUixLQUFrQixRQURWO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUEsbUJBRWZMLE9BQU8sQ0FBQ00sS0FBUixFQUZlOztBQUFBO0FBR3JCTCxZQUFBQSxVQUFVLENBQUNNLFNBQUQsQ0FBVjs7QUFIcUI7QUFNdkIsZ0JBQUlMLE1BQUosRUFBWTtBQUNWQSxjQUFBQSxNQUFNLENBQUNNLFVBQVA7QUFDQUwsY0FBQUEsU0FBUyxDQUFDSSxTQUFELENBQVQ7QUFDRDs7QUFUc0I7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsR0FBWixJQVVWLENBQUNQLE9BQUQsRUFBVUUsTUFBVixDQVZVLENBQWI7QUFZQSx3QkFBVSxZQUFNO0FBQ2QsUUFBSUgsTUFBSixFQUFZO0FBQ1YsVUFBTVUsUUFBUSxHQUFHLElBQUlDLFlBQUosRUFBakI7QUFDQVAsTUFBQUEsU0FBUyxDQUFDTSxRQUFRLENBQUNFLHVCQUFULENBQWlDWixNQUFqQyxDQUFELENBQVQ7QUFDQUUsTUFBQUEsVUFBVSxDQUFDUSxRQUFELENBQVY7QUFDRDtBQUNGLEdBTkQsRUFNRyxDQUFDVixNQUFELENBTkg7QUFRQSx3QkFBVSxZQUFNO0FBQ2QsUUFBSSxDQUFDQSxNQUFMLEVBQWE7QUFDWEssTUFBQUEsSUFBSTtBQUNMO0FBQ0YsR0FKRCxFQUlHLENBQUNMLE1BQUQsRUFBU0ssSUFBVCxDQUpIO0FBTUEsU0FBTztBQUFFSyxJQUFBQSxRQUFRLEVBQUVULE9BQVo7QUFBcUJFLElBQUFBLE1BQU0sRUFBTkE7QUFBckIsR0FBUDtBQUNELENBakNNOzs7ZUFtQ1FKLGEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlLCB1c2VDYWxsYmFjayB9IGZyb20gXCJyZWFjdFwiO1xuXG5leHBvcnQgY29uc3QgdXNlSW5wdXRBdWRpbyA9IChzdHJlYW06IE1lZGlhU3RyZWFtIHwgdW5kZWZpbmVkKSA9PiB7XG4gIGNvbnN0IFtjb250ZXh0LCBzZXRDb250ZXh0XSA9IHVzZVN0YXRlPEF1ZGlvQ29udGV4dCB8IHVuZGVmaW5lZD4oKTtcbiAgY29uc3QgW3NvdXJjZSwgc2V0U291cmNlXSA9IHVzZVN0YXRlPFxuICAgIE1lZGlhU3RyZWFtQXVkaW9Tb3VyY2VOb2RlIHwgdW5kZWZpbmVkXG4gID4oKTtcblxuICBjb25zdCBzdG9wID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgIGlmIChjb250ZXh0ICYmIGNvbnRleHQuc3RhdGUgIT09IFwiY2xvc2VkXCIpIHtcbiAgICAgIGF3YWl0IGNvbnRleHQuY2xvc2UoKTtcbiAgICAgIHNldENvbnRleHQodW5kZWZpbmVkKTtcbiAgICB9XG5cbiAgICBpZiAoc291cmNlKSB7XG4gICAgICBzb3VyY2UuZGlzY29ubmVjdCgpO1xuICAgICAgc2V0U291cmNlKHVuZGVmaW5lZCk7XG4gICAgfVxuICB9LCBbY29udGV4dCwgc291cmNlXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoc3RyZWFtKSB7XG4gICAgICBjb25zdCBhdWRpb0N0eCA9IG5ldyBBdWRpb0NvbnRleHQoKTtcbiAgICAgIHNldFNvdXJjZShhdWRpb0N0eC5jcmVhdGVNZWRpYVN0cmVhbVNvdXJjZShzdHJlYW0pKTtcbiAgICAgIHNldENvbnRleHQoYXVkaW9DdHgpO1xuICAgIH1cbiAgfSwgW3N0cmVhbV0pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFzdHJlYW0pIHtcbiAgICAgIHN0b3AoKTtcbiAgICB9XG4gIH0sIFtzdHJlYW0sIHN0b3BdKTtcblxuICByZXR1cm4geyBhdWRpb0N0eDogY29udGV4dCwgc291cmNlIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1c2VJbnB1dEF1ZGlvO1xuIl19